/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.view.interfaces.MoviesRefreshable;
import hr.algebra.view.interfaces.ActorsRefreshable;
import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.sql.MovieSqlRepository;
import hr.algebra.models.Actor;
import hr.algebra.models.Director;
import hr.algebra.models.GenericDbEntity;
import hr.algebra.models.Genre;
import hr.algebra.models.Movie;
import hr.algebra.models.transferables.GenericDbEntityTransferable;
import hr.algebra.models.transferables.ExportGenericDbEntityTransferHandler;
import hr.algebra.models.viewModels.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import hr.algebra.view.interfaces.AddableEntities;
import hr.algebra.view.interfaces.EntityAddable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Date;
import java.sql.SQLException;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;

/**
 *
 * @author vitom
 */
public class UserMoviePanel extends javax.swing.JPanel implements ActorsRefreshable, MoviesRefreshable {

    /**
     * Creates new form UserMoviePanel
     */
    MovieTableModel movieTableModel;
    MovieRepository repository;
//    private MovieArchive moviesArchive;
    private List<Movie> allMovies;
    private Set<Actor> allActors;
    private Set<Director> allDirectors;
    private Set<Genre> allGenres;

    List<Actor> selectedMovieActors;
    List<Director> selectedMovieDirectors;
    List<Genre> selectedMovieGenres;

    private List<Actor> addedMovieActors;
    private List<Director> addedMovieDirectors;
    private List<Genre> addedMovieGenre;

    private Movie selectedMovie;

    private DefaultListModel<GenericDbEntity> allActorsModel;
    private DefaultListModel<Actor> selectedMovieActorsModel;

    private DefaultListModel<GenericDbEntity> allDirectorsModel;
    private DefaultListModel<Director> selectedMovieDirectorsModel;
//todo implement this
    private DefaultListModel<GenericDbEntity> allGenresModel;
    private DefaultListModel<Genre> selectedMovieGenresModel;

    File noImageFile;

    private static final String POSTER_DIR = "assets\\moviePosters";

    public UserMoviePanel(List<Movie> movies, Set<Actor> actors, Set<Director> directors, Set<Genre> genres) {
        this.addedMovieGenre = new ArrayList<>();
        this.addedMovieDirectors = new ArrayList<>();
        this.addedMovieActors = new ArrayList<>();
        this.selectedMovieGenres = new ArrayList<>();
        this.selectedMovieDirectors = new ArrayList<>();
        this.selectedMovieActors = new ArrayList<>();
        this.allGenresModel = new DefaultListModel<>();
        this.allDirectorsModel = new DefaultListModel<>();
        this.allActorsModel = new DefaultListModel<>();
        this.selectedMovieActorsModel = new DefaultListModel<>();
        this.selectedMovieDirectorsModel = new DefaultListModel<>();
        this.selectedMovieGenresModel = new DefaultListModel<>();
        initComponents();
        this.allMovies = movies;
        this.allActors = actors;
        this.allDirectors = directors;
        this.allGenres = genres;
        noImageFile = new File("src\\assets\\no_image.png");

        init();
    }

    private void initTables() throws SQLException {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        movieTableModel = new MovieTableModel(allMovies);
        tbMovies.setModel(movieTableModel);

        allActorsModel = new DefaultListModel<>();
        loadActors();
        loadDirectors();
        loadGenres();

        // jListAllActors.add
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void init() {
        repository = new MovieSqlRepository();
        try {
            initTables();
        } catch (SQLException ex) {
            Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        initDragAndDrop();
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tfTitle = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        tfOriginalName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lbIcon = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tfReleaseDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListAllActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListMovieActors = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListAllDirectors = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListMovieDirectors = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListAllGenres = new javax.swing.JList<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListMovieGenres = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        tfPosterPath = new javax.swing.JTextField();
        btnSelectImage = new javax.swing.JButton();
        lbTittleError = new javax.swing.JLabel();
        lbDurationError = new javax.swing.JLabel();
        lbReleasedDateError = new javax.swing.JLabel();
        lbPublishDateError = new javax.swing.JLabel();
        lbPosterError = new javax.swing.JLabel();
        btnAddActor = new javax.swing.JButton();
        btnAddDirector = new javax.swing.JButton();
        btnAddGenre = new javax.swing.JButton();
        btnDeleteActor = new javax.swing.JButton();
        btnDeleteDirector = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();

        jLabel1.setText("Title");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taDescription);

        jLabel2.setText("Description");

        jLabel3.setText("Original name");

        jLabel4.setText("Duration");

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/A_bili_smo_vam_dobri_HR_zadnji.jpg"))); // NOI18N

        jButton1.setText("Choose image");

        jLabel5.setText("Released date");

        jLabel6.setText("Publish Date");

        jLabel7.setText("Link");

        jScrollPane3.setViewportView(jListAllActors);

        jScrollPane4.setViewportView(jListMovieActors);

        jLabel8.setText("Actors");

        jLabel9.setText("All actors");

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tbMovies);

        jScrollPane6.setViewportView(jListAllDirectors);

        jScrollPane7.setViewportView(jListMovieDirectors);

        jLabel10.setText("Directors");

        jLabel11.setText("All directors");

        jScrollPane8.setViewportView(jListAllGenres);

        jScrollPane9.setViewportView(jListMovieGenres);

        jLabel12.setText("Genre");

        jLabel13.setText("All genres");

        btnAdd.setText("Add ");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 153, 153));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tfPosterPath.setEditable(false);

        btnSelectImage.setText("Select image");
        btnSelectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectImageActionPerformed(evt);
            }
        });

        lbTittleError.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbTittleError.setForeground(new java.awt.Color(255, 0, 0));
        lbTittleError.setText("X");
        lbTittleError.setEnabled(false);

        lbDurationError.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbDurationError.setForeground(new java.awt.Color(255, 0, 0));
        lbDurationError.setText("X");
        lbDurationError.setEnabled(false);

        lbReleasedDateError.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbReleasedDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbReleasedDateError.setText("X");
        lbReleasedDateError.setEnabled(false);

        lbPublishDateError.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbPublishDateError.setForeground(new java.awt.Color(255, 0, 0));
        lbPublishDateError.setText("X");
        lbPublishDateError.setEnabled(false);

        lbPosterError.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbPosterError.setForeground(new java.awt.Color(255, 0, 0));
        lbPosterError.setText("X");
        lbPosterError.setEnabled(false);

        btnAddActor.setText("Add actor");
        btnAddActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActorActionPerformed(evt);
            }
        });

        btnAddDirector.setText("Add director");
        btnAddDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDirectorActionPerformed(evt);
            }
        });

        btnAddGenre.setText("Add genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnDeleteActor.setText("Delete actor");
        btnDeleteActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActorActionPerformed(evt);
            }
        });

        btnDeleteDirector.setText("Delete director");
        btnDeleteDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDirectorActionPerformed(evt);
            }
        });

        btnDeleteGenre.setText("delete genre");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnSelectImage, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbReleasedDateError))
                                            .addComponent(tfReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(81, 81, 81))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                            .addGap(23, 23, 23)
                                                            .addComponent(jLabel1)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(lbTittleError))
                                                        .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(48, 48, 48))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(13, 13, 13)))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addGap(17, 17, 17)
                                                    .addComponent(jLabel4)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbDurationError))
                                                .addComponent(tfDuration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbPublishDateError))
                                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(2, 2, 2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(192, 192, 192))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDeleteGenre)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(57, 57, 57)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel9)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel10)
                                                        .addGap(42, 42, 42))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(5, 5, 5)))
                                                .addGap(13, 13, 13)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel11)
                                                        .addGap(48, 48, 48))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addComponent(jLabel12))
                                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnAddActor)
                                                    .addComponent(btnDeleteActor))
                                                .addGap(191, 191, 191)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGap(6, 6, 6)
                                                        .addComponent(btnDeleteDirector))
                                                    .addComponent(btnAddDirector))))
                                        .addGap(14, 14, 14)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnAddGenre)
                                                    .addComponent(jLabel13)))
                                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(6, 6, 6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbPosterError)
                        .addGap(11, 11, 11))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfPosterPath, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(btnSelectImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(176, 176, 176)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addComponent(lbTittleError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(lbReleasedDateError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(87, 87, 87)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(lbDurationError))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(7, 7, 7)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)))
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(lbPublishDateError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane9)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(27, 27, 27)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddActor)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnAddDirector)
                                .addComponent(btnAddGenre)))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteActor)
                            .addComponent(btnDeleteDirector)
                            .addComponent(btnDeleteGenre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lbPosterError)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        // TODO add your handling code here:
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        // TODO add your handling code here:
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnSelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectImageActionPerformed
        // TODO add your handling code here:
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        //todo add logic 
        tfPosterPath.setText(file.getAbsolutePath());
        setPoster(file);
    }//GEN-LAST:event_btnSelectImageActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if (formValid()) {
            try {
                Movie movie = getMovieFromForm();
                String localPicturePath = uploadPicture();
                movie.setPosterPath(localPicturePath);
                int createdMovieId = repository.createMovie(movie);
                movie.setId(createdMovieId);
                repository.setMovieActors(movie);
                repository.setMovieDirectors(movie);
                repository.setMovieGenres(movie);

                refreshMovies();

            } catch (Exception ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (formValid()) {
            try {
                Movie updatedMovie = getMovieFromForm();
                updatedMovie.setId(selectedMovie.getId());
                if (selectedMovie.getPosterPath() == null || !selectedMovie.getPosterPath().equals(updatedMovie.getPosterPath())) {
                    String localPicturePath = uploadPicture();
                    updatedMovie.setPosterPath(localPicturePath);
                }
                repository.updateMovie(updatedMovie);
                Movie addedProperties = new Movie(selectedMovie.getTitle(), addedMovieActors, addedMovieDirectors, addedMovieGenre);
                repository.setMovieActors(addedProperties);
                repository.setMovieDirectors(addedProperties);
                repository.setMovieGenres(addedProperties);
                int index = allMovies.indexOf(selectedMovie);
                allMovies.set(index, updatedMovie);

                /*
                        List<MyObject> newList = oldList
    .stream()                                                  // Change values with map()
    .map(old -> updatedList.stream()                           // Iterate each to find...
            .filter(updated -> old.getId() == updated.getId()) // ...by the same id
            .findFirst()                                       // Get new one to replace
            .orElse(old))                                      // Else keep the old one
    .collect(Collectors.toList());                             // Back to List
                 */
            } catch (IOException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (MessageUtils.showConfirmDialog("Are you sure about that?", "Continuing will result in this movie being deleted") == JOptionPane.YES_OPTION) {

            try {
                // TODO add your handling code here:
                String moviePosterPath = selectedMovie.getPosterPath();
                repository.deleteMovie(selectedMovie.getId());
                refreshMovies();
                if (shouldPosterDelete(moviePosterPath)) {
                    FileUtils.deleteFileFromPath(moviePosterPath);
                }
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActorActionPerformed
        EntityAddable parent = (EntityAddable) SwingUtilities.getWindowAncestor(this);
        parent.showAddDialog(AddableEntities.Actor);
    }//GEN-LAST:event_btnAddActorActionPerformed

    private void btnAddDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDirectorActionPerformed
        EntityAddable parent = (EntityAddable) SwingUtilities.getWindowAncestor(this);
        parent.showAddDialog(AddableEntities.Director);
    }//GEN-LAST:event_btnAddDirectorActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
        EntityAddable parent = (EntityAddable) SwingUtilities.getWindowAncestor(this);
        parent.showAddDialog(AddableEntities.Genre);
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnDeleteActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActorActionPerformed
        // TODO add your handling code here:
        GenericDbEntity actor = jListAllActors.getSelectedValue();

        if (MessageUtils.showConfirmDialog("Are you sure about that?", "Continuing will result in" + actor.getName() + " being deleted") == JOptionPane.YES_OPTION) {

            try {
                repository.deleteActor(actor.getId());

                allActors.removeIf(p -> p.getId() == actor.getId());
                loadActors();
            } catch (Exception ex) {
                Logger.getLogger(UserActorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActorActionPerformed

    private void btnDeleteDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDirectorActionPerformed
        // TODO add your handling code here:
        GenericDbEntity director = jListAllDirectors.getSelectedValue();

        if (MessageUtils.showConfirmDialog("Are you sure about that?", "Continuing will result in" + director.getName() + " being deleted") == JOptionPane.YES_OPTION) {

            try {
                repository.deleteDirector(director.getId());

                allDirectors.removeIf(d -> d.getId() == director.getId());
                loadDirectors();
            } catch (Exception ex) {
                Logger.getLogger(UserActorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteDirectorActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        // TODO add your handling code here:
        GenericDbEntity genre = jListAllGenres.getSelectedValue();

        if (MessageUtils.showConfirmDialog("Are you sure about that?", "Continuing will result in" + genre.getName() + " being deleted") == JOptionPane.YES_OPTION) {

            try {
                repository.deleteGenre(genre.getId());

                allDirectors.removeIf(d -> d.getId() == genre.getId());
                loadDirectors();
            } catch (Exception ex) {
                Logger.getLogger(UserActorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private String uploadPicture() throws IOException {
        String picturePath = tfPosterPath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));

        Path path = Paths.get(picturePath);
        String pictureName = path.getFileName().toString();

        //  String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = POSTER_DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        Optional<Movie> movie = allMovies.stream().filter(m -> m.getId() == selectedMovieId).findFirst();
        //Optional<Movie> movie = repository.getMovie(selectedMovieId);
        if (movie.isPresent()) {
            selectedMovie = movie.get();
            fillForm(selectedMovie);

        }
    }

    private void clearForm() {
        addedMovieActors.clear();
        addedMovieDirectors.clear();
        addedMovieGenre.clear();

        tfTitle.setText("");
        tfOriginalName.setText("");
        taDescription.setText("");
        tfDuration.setText("");
        tfLink.setText("");
        tfReleaseDate.setText("");
        tfPublishedDate.setText("");
        tfPosterPath.setText("");
        jListMovieActors.removeAll();
        jListMovieDirectors.removeAll();
        jListMovieGenres.removeAll();

        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddActor;
    private javax.swing.JButton btnAddDirector;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteActor;
    private javax.swing.JButton btnDeleteDirector;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnSelectImage;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<GenericDbEntity> jListAllActors;
    private javax.swing.JList<GenericDbEntity> jListAllDirectors;
    private javax.swing.JList<GenericDbEntity> jListAllGenres;
    private javax.swing.JList<Actor> jListMovieActors;
    private javax.swing.JList<Director> jListMovieDirectors;
    private javax.swing.JList<Genre> jListMovieGenres;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbPosterError;
    private javax.swing.JLabel lbPublishDateError;
    private javax.swing.JLabel lbReleasedDateError;
    private javax.swing.JLabel lbTittleError;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalName;
    private javax.swing.JTextField tfPosterPath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfReleaseDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void fillForm(Movie selectedMovie) {
        tfTitle.setText(selectedMovie.getTitle());
        tfOriginalName.setText(selectedMovie.getOriginalName());
        taDescription.setText(selectedMovie.getDescription());
        tfDuration.setText(String.valueOf(selectedMovie.getDuration()));
        tfLink.setText(selectedMovie.getLink());
        tfReleaseDate.setText(selectedMovie.getReleased().toString());
        tfPublishedDate.setText(selectedMovie.getPubDate().toString());
        tfPosterPath.setText(selectedMovie.getPosterPath());
        jListMovieActors.removeAll();

        loadMoviePropertyLists(selectedMovie.getId());
        boolean showNoImage = true;
        if (selectedMovie.getPosterPath() != null) {
            File file = new File(selectedMovie.getPosterPath());
            // assets/moviePosters\Dune_SRB_novi.jpg
            if (file.exists()) {
                setPoster(file);
                showNoImage = false;

            }
        }

        if (showNoImage) {
            setNoImagePoster();
        }
    }

    private Movie getMovieFromForm() {
        Movie movie = new Movie();
        movie.setTitle(tfTitle.getText());
        movie.setOriginalName(tfOriginalName.getText());
        movie.setPosterPath(tfPosterPath.getText());

        movie.setDescription(taDescription.getText());
        movie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
        // Date releasedCheck=Date.valueOf(tfReleaseDate.getText().trim());
        movie.setReleased(Date.valueOf(tfReleaseDate.getText().trim()));
        movie.setPubDate(LocalDateTime.parse(tfPublishedDate.getText()));
        movie.addActors(selectedMovieActors);
        movie.addDirectors(selectedMovieDirectors);
        movie.addGenres(selectedMovieGenres);

        //todo finish
        return movie;
    }

    private void setNoImagePoster() {
        try {
            lbIcon.setIcon(IconUtils.createIcon(noImageFile, lbIcon.getWidth(), lbIcon.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setPoster(File file) {
        //if file exists change file to path
        try {
            lbIcon.setIcon(IconUtils.createIcon(file, lbIcon.getWidth(), lbIcon.getHeight()));

        } catch (Exception ex) {
            try {
                lbIcon.setIcon(IconUtils.createIcon(noImageFile, lbIcon.getWidth(), lbIcon.getHeight()));
            } catch (IOException exx) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            //Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);

        }
    }

    private void loadActors() {
        allActorsModel.clear();
        allActors.forEach(actor -> allActorsModel.addElement(new GenericDbEntity(actor.getId(), actor.getName())));
        jListAllActors.setModel(allActorsModel);

    }

    private void loadMoviePropertyLists(int movieId) {
        selectedMovieActorsModel.clear();
        selectedMovieDirectorsModel.clear();
        selectedMovieGenresModel.clear();
        selectedMovieActors.clear();
        selectedMovieDirectors.clear();
        selectedMovieGenres.clear();
        try {

            selectedMovieActors = repository.getActorsInMovie(movieId);
            selectedMovieDirectors = repository.getDirectorsInMovie(movieId);
            selectedMovieGenres = repository.getGenresInMovie(movieId);

        } catch (Exception ex) {
            Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        selectedMovieActors.forEach(a -> selectedMovieActorsModel.addElement(a));
        selectedMovieDirectors.forEach(d -> selectedMovieDirectorsModel.addElement(d));
        selectedMovieGenres.forEach(g -> selectedMovieGenresModel.addElement(g));

        jListMovieActors.setModel(selectedMovieActorsModel);
        jListMovieDirectors.setModel(selectedMovieDirectorsModel);
        jListMovieGenres.setModel(selectedMovieGenresModel);

    }

    private void loadDirectors() {
        allDirectorsModel.clear();
        allDirectors.forEach(director -> allDirectorsModel.addElement(new GenericDbEntity(director.getId(), director.getName())));
        jListAllDirectors.setModel(allDirectorsModel);
    }

    private void loadGenres() {
        allGenresModel.clear();
        allGenres.forEach(genre -> allGenresModel.addElement(new GenericDbEntity(genre.getId(), genre.getName())));
        jListAllGenres.setModel(allGenresModel);
    }

    private void initDragAndDrop() {

        jListAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListAllActors.setDragEnabled(true);
        List<GenericDbEntity> actors = new ArrayList<>();
        //todo stao si ovdje
        allActors.forEach(a -> actors.add(new GenericDbEntity(a.getId(), a.getName())));
        jListAllActors.setTransferHandler(new ExportGenericDbEntityTransferHandler(jListAllActors));
        jListMovieActors.setDropMode(DropMode.ON);
        jListMovieActors.setTransferHandler(new ImportActorsFromMovieTransferHandler());

        jListAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListAllDirectors.setDragEnabled(true);
        jListAllDirectors.setTransferHandler(new ExportGenericDbEntityTransferHandler(jListAllDirectors));
        jListMovieDirectors.setDropMode(DropMode.ON);
        jListMovieDirectors.setTransferHandler(new ImportDirectorFromMovieTransferHandler());

        jListAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListAllGenres.setDragEnabled(true);
        jListAllGenres.setTransferHandler(new ExportGenericDbEntityTransferHandler(jListAllGenres));
        jListMovieGenres.setDropMode(DropMode.ON);
        jListMovieGenres.setTransferHandler(new ImportGenreFromMovieTransferHandler());
    }

    private boolean formValid() {
        String numbersRegex = "[+-]?[0-9]+";
        File posterFile = new File(tfPosterPath.getText());
        boolean[] isError = {
            tfTitle.getText().trim().isEmpty(),
            tfDuration.getText().trim().isEmpty() && Pattern.matches(numbersRegex, tfDuration.getText().trim()),
            true,
            true,
            !posterFile.exists()
        };
        //Label
        lbTittleError.setEnabled(isError[0]);
        lbDurationError.setEnabled(isError[1]);
        lbPosterError.setEnabled(isError[4]);
        try {
            Date releasedCheck = Date.valueOf(tfReleaseDate.getText().trim());
            isError[2] = false;
            lbReleasedDateError.setEnabled(false);
            LocalDateTime publishDate = LocalDateTime.parse(tfPublishedDate.getText());
            isError[3] = false;
            lbPublishDateError.setEnabled(false);
        } catch (IllegalArgumentException ex) {
            lbReleasedDateError.setEnabled(true);
            return false;
        } catch (DateTimeException ex2) {
            lbPublishDateError.setEnabled(true);
            return false;
        }
        for (boolean b : isError) {
            if (b == true) {
                return false;
            }
        }
        return true;
    }

    @Override
    public void refreshActors() {
        ActorsRefreshable refreshableParent = (ActorsRefreshable) SwingUtilities.getWindowAncestor(this);
        refreshableParent.refreshActors();

    }

    @Override
    public void refreshMovies() {
        MoviesRefreshable refreshableParent = (MoviesRefreshable) SwingUtilities.getWindowAncestor(this);
        refreshableParent.refreshMovies();

    }

    public void setAllActors(Set<Actor> actors) {
        allActors = actors;
        loadActors();
    }

    public void setAllDirectors(Set<Director> directors) {
        allDirectors = directors;
        loadDirectors();
    }

    public void setAllGenres(Set<Genre> genres) {
        allGenres = genres;
        loadGenres();
    }

    public void setAllMovies(List<Movie> movies) {
        allMovies = movies;
        movieTableModel = new MovieTableModel(allMovies);
        tbMovies.setModel(movieTableModel);
    }

    private boolean shouldPosterDelete(String moviePosterPath) {

        return !allMovies.stream().anyMatch(m -> moviePosterPath.equals(m.getPosterPath()));
    }

    private class ImportDirectorFromMovieTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(GenericDbEntityTransferable.ENTITY_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                GenericDbEntity data = (GenericDbEntity) transferable.getTransferData(GenericDbEntityTransferable.ENTITY_FLAVOR);
                Director add = new Director(data.getId(), data.getName());
                selectedMovie.addDirector(add);
                addedMovieDirectors.add(add);
                selectedMovieDirectors.add(add);
                selectedMovieDirectorsModel.addElement(add);
                return true;
            } catch (UnsupportedFlavorException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }

    private class ImportGenreFromMovieTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(GenericDbEntityTransferable.ENTITY_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                GenericDbEntity data = (GenericDbEntity) transferable.getTransferData(GenericDbEntityTransferable.ENTITY_FLAVOR);
                Genre add = new Genre(data.getId(), data.getName());
                selectedMovie.addGenre(add);
                addedMovieGenre.add(add);
                selectedMovieGenres.add(add);
                selectedMovieGenresModel.addElement(add);
                return true;
                /*selectedMovie.addDirector(add);
                addedMovieActors.add(add);
                selectedMovieActors.add(add);
                selectedMovieActorsModel.addElement(add);*/
                //loadMoviePropertyLists(selectedMovie.getId());
            } catch (UnsupportedFlavorException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false; //To change body of generated methods, choose Tools | Templates.
        }

    }

    private class ImportActorsFromMovieTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(GenericDbEntityTransferable.ENTITY_FLAVOR);
            //return super.canImport(support); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                GenericDbEntity data = (GenericDbEntity) transferable.getTransferData(GenericDbEntityTransferable.ENTITY_FLAVOR);

                //        Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                Actor add = new Actor(data.getId(), data.getName());
                selectedMovie.addActor(add);
                addedMovieActors.add(add);
                selectedMovieActors.add(add);
                selectedMovieActorsModel.addElement(add);
                return true;
                //loadMoviePropertyLists(selectedMovie.getId());
            } catch (UnsupportedFlavorException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UserMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false; //To change body of generated methods, choose Tools | Templates.
        }

    }

}
